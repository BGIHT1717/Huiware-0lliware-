local Library = {}

local function CreateInstance(class, properties)
    local instance = Instance.new(class)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

function Library:CreateWindow()
    local GUI = CreateInstance("ScreenGui", {
        Name = "HuiWare",
        Parent = game.CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    local MainFrame = CreateInstance("Frame", {
        Name = "MainFrame",
        Parent = GUI,
        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(0, 500, 0, 350),
        Active = true,
        Draggable = true
    })

    -- Создаем радужную границу
    local borderSize = 1
    local borders = {}
    local borderColors = {
        Color3.fromRGB(255, 0, 0),
        Color3.fromRGB(255, 165, 0),
        Color3.fromRGB(255, 255, 0),
        Color3.fromRGB(0, 255, 0),
        Color3.fromRGB(0, 0, 255),
        Color3.fromRGB(148, 0, 211)
    }

    -- Верхняя граница
    borders.top = CreateInstance("Frame", {
        Parent = MainFrame,
        BackgroundColor3 = borderColors[1],
        Position = UDim2.new(0, -borderSize, 0, -borderSize),
        Size = UDim2.new(1, borderSize * 2, 0, borderSize),
    })

    -- Правая граница
    borders.right = CreateInstance("Frame", {
        Parent = MainFrame,
        BackgroundColor3 = borderColors[2],
        Position = UDim2.new(1, 0, 0, -borderSize),
        Size = UDim2.new(0, borderSize, 1, borderSize * 2),
    })

    -- Нижняя граница
    borders.bottom = CreateInstance("Frame", {
        Parent = MainFrame,
        BackgroundColor3 = borderColors[3],
        Position = UDim2.new(0, -borderSize, 1, 0),
        Size = UDim2.new(1, borderSize * 2, 0, borderSize),
    })

    -- Левая граница
    borders.left = CreateInstance("Frame", {
        Parent = MainFrame,
        BackgroundColor3 = borderColors[4],
        Position = UDim2.new(0, -borderSize, 0, -borderSize),
        Size = UDim2.new(0, borderSize, 1, borderSize * 2),
    })

    -- Анимация границ
    local function animateBorders()
        local speed = 0.5
        game:GetService("RunService").RenderStepped:Connect(function()
            local time = tick() * speed
            for i, border in pairs(borders) do
                local colorIndex = (math.floor(time + i) % #borderColors) + 1
                border.BackgroundColor3 = borderColors[colorIndex]
            end
        end)
    end
    animateBorders()

    local Title = CreateInstance("TextLabel", {
        Name = "Title",
        Parent = MainFrame,
        BackgroundColor3 = Color3.fromRGB(20, 20, 20),
        Size = UDim2.new(0, 150, 0, 40),
        Font = Enum.Font.GothamBold,
        Text = "HuiWare",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 22
    })

    local TabHolder = CreateInstance("ScrollingFrame", {
        Name = "TabHolder",
        Parent = MainFrame,
        BackgroundColor3 = Color3.fromRGB(20, 20, 20),
        Position = UDim2.new(0, 0, 0, 40),
        Size = UDim2.new(0, 150, 1, -40),
        ScrollBarThickness = 2,
        CanvasSize = UDim2.new(0, 0, 0, 0)
    })

    local ContentHolder = CreateInstance("Frame", {
        Name = "ContentHolder",
        Parent = MainFrame,
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        Position = UDim2.new(0, 150, 0, 0),
        Size = UDim2.new(1, -150, 1, 0)
    })

    local UIListLayout = CreateInstance("UIListLayout", {
        Parent = TabHolder,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 0)
    })

    local ToggleButton = CreateInstance("TextButton", {
        Name = "ToggleUI",
        Parent = GUI,
        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
        Position = UDim2.new(1, -60, 1, -60),
        Size = UDim2.new(0, 50, 0, 50),
        Font = Enum.Font.GothamBold,
        Text = "T",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18
    })

    ToggleButton.MouseButton1Click:Connect(function()
        MainFrame.Visible = not MainFrame.Visible
    end)

    local TabLibrary = {}

    function TabLibrary:CreateTab(name)
        local Tab = CreateInstance("TextButton", {
            Name = name,
            Parent = TabHolder,
            BackgroundColor3 = Color3.fromRGB(25, 25, 25),
            Size = UDim2.new(1, 0, 0, 35),
            Font = Enum.Font.Gotham,
            Text = "  "..name,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            AutoButtonColor = false,
            BorderSizePixel = 0
        })

        local TabIndicator = CreateInstance("Frame", {
            Name = "Indicator",
            Parent = Tab,
            BackgroundColor3 = Color3.fromRGB(255, 0, 0),
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 2, 1, 0),
            Visible = false,
            BorderSizePixel = 0
        })

        local TabContent = CreateInstance("ScrollingFrame", {
            Name = name.."Content",
            Parent = ContentHolder,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 10),
            Size = UDim2.new(1, -20, 1, -20),
            Visible = false,
            ScrollBarThickness = 4,
            CanvasSize = UDim2.new(0, 0, 0, 0)
        })

        local ContentList = CreateInstance("UIListLayout", {
            Parent = TabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8)
        })

        ContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentList.AbsoluteContentSize.Y + 10)
        end)

        UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabHolder.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
        end)

        Tab.MouseButton1Click:Connect(function()
            for _, otherTab in pairs(TabHolder:GetChildren()) do
                if otherTab:IsA("TextButton") then
                    otherTab.Indicator.Visible = false
                    otherTab.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                    otherTab.TextColor3 = Color3.fromRGB(255, 255, 255)
                end
            end
            TabIndicator.Visible = true
            Tab.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            Tab.TextColor3 = Color3.fromRGB(255, 255, 255)

            for _, content in pairs(ContentHolder:GetChildren()) do
                if content:IsA("ScrollingFrame") then
                    content.Visible = false
                end
            end
            TabContent.Visible = true
        end)

        local ElementLibrary = {}

        function ElementLibrary:CreateButton(text, callback)
            local Button = CreateInstance("TextButton", {
                Parent = TabContent,
                BackgroundColor3 = Color3.fromRGB(35, 35, 35),
                Size = UDim2.new(1, 0, 0, 35),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                BorderSizePixel = 0
            })

            Button.MouseEnter:Connect(function()
                Button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            end)

            Button.MouseLeave:Connect(function()
                Button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            end)

            Button.MouseButton1Click:Connect(callback or function() end)
            return Button
        end

        function ElementLibrary:CreateSlider(text, min, max, default, callback)
            local SliderHolder = CreateInstance("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Color3.fromRGB(35, 35, 35),
                Size = UDim2.new(1, 0, 0, 50),
                BorderSizePixel = 0
            })

            local SliderText = CreateInstance("TextLabel", {
                Parent = SliderHolder,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 25),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local SliderFrame = CreateInstance("Frame", {
                Parent = SliderHolder,
                BackgroundColor3 = Color3.fromRGB(25, 25, 25),
                Position = UDim2.new(0, 10, 0, 35),
                Size = UDim2.new(1, -20, 0, 5),
                BorderSizePixel = 0
            })

            local SliderFill = CreateInstance("Frame", {
                Parent = SliderFrame,
                BackgroundColor3 = Color3.fromRGB(255, 0, 0),
                Size = UDim2.new(0, 0, 1, 0),
                BorderSizePixel = 0
            })

            local SliderButton = CreateInstance("TextButton", {
                Parent = SliderFrame,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(0, -5, 0, -7),
                Size = UDim2.new(0, 10, 0, 20),
                Text = "",
                BorderSizePixel = 0
            })

            local Value = default or min
            local Dragging = false

            local function UpdateSlider(input)
                local MousePosition
                if input.UserInputType == Enum.UserInputType.Touch then
                    MousePosition = Vector2.new(input.Position.X, input.Position.Y)
                else
                    MousePosition = game:GetService("UserInputService"):GetMouseLocation()
                end
                
                local SliderPosition = SliderFrame.AbsolutePosition
                local SliderSize = SliderFrame.AbsoluteSize
                local Percent = math.clamp((MousePosition.X - SliderPosition.X) / SliderSize.X, 0, 1)
                Value = min + (max - min) * Percent
                
                SliderFill.Size = UDim2.new(Percent, 0, 1, 0)
                SliderButton.Position = UDim2.new(Percent, -5, 0, -7)
                SliderText.Text = text..": "..tostring(math.floor(Value))
                
                if callback then
                    callback(Value)
                end
            end

            SliderButton.MouseButton1Down:Connect(function()
                Dragging = true
            end)

            SliderButton.TouchStarted:Connect(function()
                Dragging = true
            end)

            game:GetService("UserInputService").InputEnded:Connect(function(input)
                if (input.UserInputType == Enum.UserInputType.MouseButton1 or 
                    input.UserInputType == Enum.UserInputType.Touch) then
                    Dragging = false
                end
            end)

            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if Dragging and 
                   (input.UserInputType == Enum.UserInputType.MouseMovement or 
                    input.UserInputType == Enum.UserInputType.Touch) then
                    UpdateSlider(input)
                end
            end)

            -- Добавляем обработку касания для всего SliderFrame
            SliderFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch or 
                   input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Dragging = true
                    UpdateSlider(input)
                end
            end)

            UpdateSlider({Position = Vector2.new(
                SliderFrame.AbsolutePosition.X + 
                (((default or min) - min) / (max - min)) * SliderFrame.AbsoluteSize.X,
                SliderFrame.AbsolutePosition.Y
            ), UserInputType = Enum.UserInputType.Touch})
            
            return SliderHolder
        end

        function ElementLibrary:CreateTextbox(text, placeholder, callback)
            local TextboxHolder = CreateInstance("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Color3.fromRGB(35, 35, 35),
                Size = UDim2.new(1, 0, 0, 70),
                BorderSizePixel = 0
            })

            local TextboxLabel = CreateInstance("TextLabel", {
                Parent = TextboxHolder,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 25),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local Textbox = CreateInstance("TextBox", {
                Parent = TextboxHolder,
                BackgroundColor3 = Color3.fromRGB(25, 25, 25),
                Position = UDim2.new(0, 10, 0, 30),
                Size = UDim2.new(1, -20, 0, 30),
                Font = Enum.Font.Gotham,
                PlaceholderText = placeholder,
                Text = "",
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                ClearTextOnFocus = false,
                BorderSizePixel = 0
            })

            Textbox.FocusLost:Connect(function(enterPressed)
                if enterPressed and callback then
                    callback(Textbox.Text)
                end
            end)

            return TextboxHolder
        end

        return ElementLibrary
    end

    return TabLibrary
end

return Library
